generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  username         String
  hashedPwd        String
  salt             String // Salt for password hashing
  resetToken       String? // Token for password reset
  resetTokenExpiry DateTime? // Expiry for reset token
  photoUrl         String?
  provider         Provider        @default(EMAIL)
  bio              String?
  contact          String?
  timezone         String?
  comments         Comment[]
  auditLogs        AuditLog[]
  notifications    Notification[]
  projectMembers   ProjectMember[]
  teamMembers      TeamMember[]
  assignedIssues   Issue[]         @relation("IssueAssignee")
  reportedIssues   Issue[]         @relation("IssueReporter")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Team {
  id        String       @id @default(uuid())
  name      String
  members   TeamMember[]
  projects  Project[]    @relation("TeamProjects")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(TESTER)
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

enum Provider {
  GOOGLE
  GITHUB
  EMAIL
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  QA_ENGINEER
  TESTER
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String
  visibility  Visibility      @default(PRIVATE)
  issues      Issue[]
  members     ProjectMember[]
  teams       Team[]          @relation("TeamProjects")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      Role     @default(TESTER)
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model Issue {
  id          String      @id @default(uuid())
  title       String
  description String
  status      IssueStatus
  priority    Priority    @default(MEDIUM)
  assigneeId  String
  reporterId  String
  projectId   String
  issueType   IssueType?
  comments    Comment[]
  assignee    User        @relation("IssueAssignee", fields: [assigneeId], references: [id])
  project     Project     @relation(fields: [projectId], references: [id])
  reporter    User        @relation("IssueReporter", fields: [reporterId], references: [id])
  tags        Tag[]       @relation("IssueTags")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  REOPENED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  issueId   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  issue     Issue    @relation(fields: [issueId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id     String  @id @default(uuid())
  name   String  @unique
  issues Issue[] @relation("IssueTags")
}

model Notification {
  id          String   @id @default(uuid())
  message     String
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum IssueType {
  BUG
  FEATURE_REQUEST
  TASK
  STORY
  EPIC
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  description String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
